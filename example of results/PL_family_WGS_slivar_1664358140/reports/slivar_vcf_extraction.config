/*
#########################################################################
##                                                                     ##
##     slivar_vcf_extraction.config                                    ##
##                                                                     ##
##     Gael A. Millot                                                  ##
##     Bioinformatics and Biostatistics Hub                            ##
##     Computational Biology Department                                ##
##     Institut Pasteur Paris                                          ##
##                                                                     ##
#########################################################################
*/


//////// variables that will be used only in the main.nf

// variables exported to the main.nf environment. See https://www.nextflow.io/docs/latest/config.html#scope-env
env {
    sample_path = "/pasteur/zeus/projets/p02/ghfc_wgs_zeus/WGS/Dyslexia/vcf/Dyslexia.gatk-vqsr.splitted.norm.vep.merged.vcf.gz" // path of the sample file. Example : sample_path="/mnt/c/Users/Gael/Documents/Git_projects/slivar_vcf_extraction/dataset/Dyslexia.gatk-vqsr.splitted.norm.vep.merged_first_10000.vcf.gz" sample_path="/pasteur/zeus/projets/p02/ghfc_wgs_zeus/WGS/Dyslexia/vcf/Dyslexia.gatk-vqsr.splitted.norm.vep.merged.vcf.gz". The .tbi file seems not required when calling a .gz file
    //Warning: do not write the out_path now. See below. If written here, the one below is not considered"
    fun_path = "/pasteur/zeus/projets/p01/BioIT/gmillot/08002_bourgeron/bin/slivar-functions.js" // .js file containing functions for the slivar --family-expr option. Example : fun_path="/mnt/c/Users/Gael/Documents/Git_projects/slivar_vcf_extraction/bin/slivar-functions.js", fun_path="/pasteur/zeus/projets/p01/BioIT/gmillot/08002_bourgeron/bin/slivar-functions.js"
    ped_path="/pasteur/zeus/projets/p01/BioIT/gmillot/08002_bourgeron/dataset/Dyslexia.pedigree.txt" // path of the pedigree file. Example : ped_path="/mnt/c/Users/Gael/Documents/Git_projects/slivar_vcf_extraction/dataset/Dyslexia.pedigree.txt", ped_path="/pasteur/zeus/projets/p01/BioIT/gmillot/08002_bourgeron/dataset/Dyslexia.pedigree.txt" // pedigree

// Reminder. The command of slivar used are:
    // slivar expr --js ${fun} -g ${annot1} -g ${annot2} --vcf ${vcf} --ped ${ped} --pass-only --family-expr "${family_expr}" -o "res.vcf"
    // slivar tsv --ped ${ped} -s aff_only -i ${info} res.vcf > res.tsv

    annot1_path="/pasteur/zeus/projets/p01/BioIT/gmillot/08002_bourgeron/dataset/cadd-1.6-SNVs-phred10-GRCh37.zip" // path of the cadd annotation file. Example : annot1_path="/mnt/c/Users/Gael/Documents/Git_projects/slivar_vcf_extraction/dataset/cadd-1.6-SNVs-phred10-GRCh37.zip", annot1_path="/pasteur/zeus/projets/p02/ghfc_wgs_zeus/references/GRCh37/slivar-gnotate/cadd-1.6-SNVs-phred10-GRCh37.zip" // cadd annotation
    annot2_path="/pasteur/zeus/projets/p01/BioIT/gmillot/08002_bourgeron/dataset/gnomad-2.1.1-genome-GRCh37.zip" // path of gnomad annotation file. Example : annot2_path="/mnt/c/Users/Gael/Documents/Git_projects/slivar_vcf_extraction/dataset/gnomad-2.1.1-genome-GRCh37.zip", annot2_path="/pasteur/zeus/projets/p02/ghfc_wgs_zeus/references/GRCh37/slivar-gnotate/gnomad-2.1.1-genome-GRCh37.zip" // gnomad annotation
    sample_expr = " " // expression to use for the --sample-expr option of slivar. Example: sample_expr = "--sample-expr 'high_quality:sample.GQ >= 10'". Before the colon is the name of the new field added in the INFO field of the VCF. Write " " if no selection wanted (only annotation). "--sample-expr 'all:sample.DP >= 0'" Must be used if no filter wanted but tsv wanted. Another example: "--sample-expr 'all:sample.GQ == \".\"'"
    pedigree_expr = "--family-expr 'aff_only:fam.every(find_het_aff_hom_ref_unaff)'" // expression to use for the --family-expr or --trio or --group-expr option of slivar in order to filter the data according to pedigree info or VCF info (depends on the .js file defined by fun_path above). See https://github.com/brentp/slivar#commands for details. Example: "--family-expr 'aff_only:fam.every(find_het_aff_hom_ref_unaff)'". Write " " if no selection wanted (only annotation). Of note, for no filtering, pedigree_expr="all:fam.every(function(s){return s.affected || s.unaffected})" does not work, we have to use --sample-expr
    filter = "true" // if false, the output VCF is only labeled in the VCF INFO field according to the pedigree_expr parameter. If true, take only the labeled lines (variants) of the output VCF. Of note, true add the --pass-only argument to the slivar expr
    tsv_sample = "aff_only" // mandatory -s option of the slivar tsv command. Example sample="aff_only". What is indicated must be a field of the INFO field of the vcf, added using the sample_expr or pedigree_expr parameter
    tsv_info = "-i AC -i AF -i AN -i BaseQRankSum -i DB -i DP -i ExcessHet -i FS -i InbreedingCoeff -i MLEAC -i MLEAF -i MQ -i MQRankSum -i QD -i ReadPosRankSum -i SOR -i VQSLOD -i culprit -i CSQ -i cadd_phred -i gno_non_neuro_af_all -i gno_non_neuro_af_nfe -i gno_non_neuro_nhomalt_all -i gno_non_neuro_nhomalt_nfe -i highest_impact_order -i aff_only" // -i option of the slivar tsv command that extracts data from the INFO field of the vcf file (https://github.com/brentp/slivar#tsv) for the tsv file output. Example : "-i AC -i AF -i AN". Warning: if one of the -i is not in the vcf file, it will generate an error. Thus, be carefull with what is used in the sample_expr or pedigree_expr parameter
}

//////// end variables that will be used only in the main.nf




//////// variables that will be used below (and potentially in the main.nf file)

//// must be also exported
system_exec = 'slurm' // the system that runs the workflow. Either 'local' or 'slurm'
out_path_ini="/pasteur/zeus/projets/p01/BioIT/gmillot/08002_bourgeron/results" // where the report file will be saved. Example report_path = '.' for where the main.nf run is executed or report_path = '/mnt/c/Users/Gael/Desktop'. Another example : out_path="/pasteur/zeus/projets/p01/BioIT/gmillot/08002_bourgeron/results". Warning: this does not work: out_path="/mnt/share/Users/gael/Desktop"
//// end must be also exported

//// General variable
result_folder_name="PL_family_WGS_slivar"
//// end General variable

//// slurm variables
// see https://confluence.pasteur.fr/pages/viewpage.action?pageId=69304504
queue = 'hubbioit' // -p option of slurm. Example: queue = 'common,dedicated'. Example: queue = 'hubbioit'
qos = '--qos=hubbioit' // --qos option of slurm. Example: qos= '--qos=fast'. Example: qos = '--qos=ultrafast'. Example: qos = '--qos=hubbioit'
add_options = ' ' // additional option of slurm. Example: addoptions = '--exclude=maestro-1101,maestro-1034' or add_options = ' ', add_options = '--time=70:00:00' (acceptable time formats include "minutes", "minutes:seconds", "hours:minutes:seconds", "days-hours", "days-hours:minutes" and "days-hours:minutes:seconds"). See https://slurm.schedmd.com/sbatch.html#OPT_time for other options
//// end slurm variables


//////// end variables that will be used below



//////// Pre processing

int secs = (new Date().getTime())/1000
out_path="${out_path_ini}/${result_folder_name}_${secs}"

//////// end Pre processing



//////// variables used here and also in the main.nf file

env {
    system_exec = "${system_exec}"
    out_path_ini = "${out_path_ini}"
    out_path = "${out_path}"
    queue = "${queue}"
    qos = "${qos}"
    add_options = "${add_options}"
}

//////// variables used here and also in the main.nf file





//////// Scopes

// kind of execution. Either 'local' or 'slurm'
// those are closures. See https://www.nextflow.io/docs/latest/script.html#closures
executor {
    name = "${system_exec}"
    queueSize = 2000
}

// create a report folder and print a html report file . If no absolute path, will be where the run is executed
// see https://www.nextflow.io/docs/latest/config.html#config-report
report {
       enabled = true
       file = "${out_path}/reports/report.html" // warning: here double quotes to get the nextflow variable interpretation
}

// txt file with all the processes and info
trace {
    enabled = true
    file = "${out_path}/reports/trace.txt"
}

// html file with all the processes
timeline {
    enabled = true
    file = "${out_path}/reports/timeline.html"
}

// .dot picture of the workflow
dag {
    enabled = true
    file = "${out_path}/reports/dag.dot"
}


// define singularity parameters
singularity {
    enabled = true
    autoMounts = true // automatically mounts host paths in the executed container
    if(system_exec == 'slurm' || system_exec == 'slurm_local'){
        runOptions = '--no-home --bind /pasteur'
    }else{
        runOptions = '--no-home' // --no-home prevent singularity to mount the $HOME path and thus forces singularity to work with only what is inside the container
    }
    //runOptions = '--home $HOME:/home/$USER --bind /pasteur' // provide any extra command line options supported by the singularity exec. Here, fait un bind de tout /pasteur dans /pasteur du container. Sinon pas d acc√®s
    if(system_exec == 'slurm'){
        cacheDir = '/pasteur/zeus/projets/p01/BioIT/gmillot/singularity' // name of the directory where remote Singularity images are stored. When rerun, the exec directly uses these without redownloading them. When using a computing cluster it must be a shared folder accessible to all computing nodes
    }else if(system_exec == 'slurm_local'){
        cacheDir = 'singularity' // "$baseDir/singularity" can be used but do not forget double quotes.
    }else{
        cacheDir = '/mnt/c/Users/Gael/Documents/singularity' // "$baseDir/singularity" can be used but do not forget double quotes.
    }
}

//////// end Scopes



//////// directives

// provide the default directives for all the processes in the main.nf pipeline calling this config file
process {
// directives for all the processes
    // executor='local' // no need because already defined above in the executor scope
    if(system_exec == 'slurm'){
        queue = "$queue"
        clusterOptions = "$qos $add_options"
        scratch=false
        maxRetries=30
        errorStrategy='retry'
    }else{
        maxRetries=0
        errorStrategy='terminate'
    }

    withLabel: bash {
        container='gmillot/bash-extended_v4.0:gitlab_v8.0'
        cpus=1
        memory='3G'
    }

    withLabel: slivar {
        container='gmillot/slivar_v1.0:gitlab_v8.11'
        cpus=1
        memory='60G'
    }
}

//////// end directives