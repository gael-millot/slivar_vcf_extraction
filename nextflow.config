/*
#########################################################################
##                                                                     ##
##     slivar_vcf_extraction.config                                    ##
##                                                                     ##
##     gmillot A. Millot                                               ##
##     Bioinformatics and Biostatistics Hub                            ##
##     Institut Pasteur Paris                                          ##
##                                                                     ##
#########################################################################
*/

/*
#########################################################################
##                                                                     ##
##     Parameters that must be set by the user                         ##
##                                                                     ##
#########################################################################
*/

/*
##########################
##                      ##
##     Slivar           ##
##                      ##
##########################
*/

env {
    sample_path = "https://zenodo.org/records/10723664/files/example.vcf.gz" // path of the sample file. Example : sample_path="/mnt/c/Users/gmillot/Documents/Git_projects/slivar_vcf_extraction/dataset/vcf.gz" sample_path="/pasteur/zeus/projets/p02/ghfc_wgs_zeus/WGS/Dyslexia/vcf/Dyslexia.gatk-vqsr.splitted.norm.vep.merged.vcf.gz". The .tbi file seems not required when calling a .gz file
    fun_path = "https://raw.githubusercontent.com/gael-millot/slivar_vcf_extraction/v2.4/bin/slivar-functions.js" // .js file containing functions for the slivar --family-expr option. Example : fun_path="/mnt/c/Users/gmillot/Documents/Git_projects/slivar_vcf_extraction/bin/slivar-functions.js", fun_path="/pasteur/zeus/projets/p01/BioIT/gmillot/08002_bourgeron/bin/slivar-functions.js", fun_path="https://raw.githubusercontent.com/gael-millot/slivar_vcf_extraction/master/bin/slivar-functions.js"
    ped_path = "https://zenodo.org/records/10723664/files/pedigree.txt" // path of the pedigree file. Example : ped_path="/mnt/c/Users/gmillot/Documents/Git_projects/slivar_vcf_extraction/dataset/pedigree.txt", ped_path="/pasteur/zeus/projets/p01/BioIT/gmillot/08002_bourgeron/dataset/pedigree.txt"

// Reminder. The command of slivar used are:
    // slivar expr --js ${fun} -g ${annot1} -g ${annot2} --vcf ${vcf} --ped ${ped} --pass-only --family-expr "${pedigree_expr}" -o "res.vcf"
    // slivar tsv --ped ${ped} -s aff_only -i ${info} res.vcf > res.tsv

    annot1_path = "https://zenodo.org/records/10723664/files/cadd-1.6-SNVs-phred10-GRCh37.zip" // path of the cadd annotation file. Example : annot1_path="/mnt/c/Users/gmillot/Documents/Git_projects/slivar_vcf_extraction/dataset/cadd-1.6-SNVs-phred10-GRCh37.zip", annot1_path="/pasteur/zeus/projets/p02/ghfc_wgs_zeus/references/GRCh37/slivar-gnotate/cadd-1.6-SNVs-phred10-GRCh37.zip" // cadd annotation
    annot2_path = "https://zenodo.org/records/10723664/files/gnomad-2.1.1-genome-GRCh37.zip" // path of gnomad annotation file. Example : annot2_path="/mnt/c/Users/gmillot/Documents/Git_projects/slivar_vcf_extraction/dataset/gnomad-2.1.1-genome-GRCh37.zip", annot2_path="/pasteur/zeus/projets/p02/ghfc_wgs_zeus/references/GRCh37/slivar-gnotate/gnomad-2.1.1-genome-GRCh37.zip" // gnomad annotation
    sample_expr = "--sample-expr 'all:true'" // expression to use for the --sample-expr option of slivar. Example: sample_expr = "--sample-expr 'high_quality:sample.GQ >= 10'". Before the colon is the name of the new field added in the INFO field of the VCF. Write " " if no selection wanted (only annotation). Write "--sample-expr 'all:true'" if no filter wanted but tsv wanted. Warning: all:sample.DP >= 0 is not equivalent to all:true. Of note, "--sample-expr 'all:sample.GQ == \".\"'" is correctly written in the .command.sh file in the work dir of nextflow, but does not seem to work in selecting the empty GQ
    pedigree_expr = " " // expression to use for the --family-expr or --trio or --group-expr option of slivar in order to filter the data according to pedigree info or VCF info (depends on the .js file defined by fun_path above). See https://github.com/brentp/slivar#commands for details. Example: "--family-expr 'aff_only:fam.every(find_het_aff_hom_ref_unaff)'". Write " " if no selection wanted (only annotation). Of note, for no filtering, pedigree_expr="all:fam.every(function(s){return s.affected || s.unaffected})" does not work, we have to use --sample-expr
    filter = "false" // if false, the output VCF is only labeled in the VCF INFO field according to the pedigree_expr parameter. If true, take only the labeled lines (variants) of the output VCF. Of note, true add the --pass-only argument to the slivar expr
    tsv_file = "true" // if true, return a .tsv file of the .vcf file output
    tsv_sample = "all" // mandatory -s option of the slivar tsv command. Example sample="aff_only". What is indicated must be a field of the INFO field of the vcf, added using the sample_expr or pedigree_expr parameter. Ignored if tsv_file == "true"
    tsv_info = "-i AC -i AF -i AN -i BaseQRankSum -i DB -i DP -i ExcessHet -i FS -i InbreedingCoeff -i MLEAC -i MLEAF -i MQ -i MQRankSum -i QD -i ReadPosRankSum -i SOR -i VQSLOD -i culprit -i CSQ -i cadd_phred -i gno_non_neuro_af_all -i gno_non_neuro_af_nfe -i gno_non_neuro_nhomalt_all -i gno_non_neuro_nhomalt_nfe -i highest_impact_order -i all" // -i option of the slivar tsv command that extracts data from the INFO field of the vcf file (https://github.com/brentp/slivar#tsv) for the tsv file output. Example : "-i AC -i AF -i AN". Warning: if one of the -i is not in the vcf file, it will generate an error. Thus, be carefull with what is used in the sample_expr or pedigree_expr parameter. Ignored if tsv_file == "true"
}


/*
############################
##                        ##
##     Local / Cluster    ##
##                        ##
############################
*/

// see https://confluence.pasteur.fr/pages/viewpage.action?pageId=69304504
system_exec = 'local' // single character string of the system that runs the workflow. Either 'local' to run on our own computer or 'slurm' to run on the pasteur cluster. Example: system_exec = 'local'
queue = 'common,dedicated' // single character string of the -p option of slurm. Example: queue = 'common,dedicated'. Example: queue = 'hubbioit'
qos = '--qos=ultrafast' // single character string of the --qos option of slurm. Example: qos= '--qos=fast'. Example: qos = '--qos=ultrafast'. Example: qos = '--qos=hubbioit'
add_options = ' ' // single character string of the additional option of slurm. Example: add_options = '--exclude=maestro-1101,maestro-1034' or add_options = ' ', add_options = '--time=70:00:00' (acceptable time formats include "minutes", "minutes:seconds", "hours:minutes:seconds", "days-hours", "days-hours:minutes" and "days-hours:minutes:seconds"). See https://slurm.schedmd.com/sbatch.html#OPT_time for other options
apptainer_path = "NULL" // single character string of the path of the apptainer folder (where all the apptainer images are are pulled and stored for proper nextflow execution). Write "NULL" for default path (but will not work in most cases). Example: apptainer_path='/pasteur/zeus/projets/p01/BioIT/gmillot/apptainer'. Example: apptainer_path='/mnt/c/Users/gmillot/apptainer'. Example: apptainer_path="$baseDir/apptainer" # do not forget double quotes

/*
#############################
##                         ##
##     Other (optional)    ##
##                         ##
#############################
*/

out_path_ini = "$baseDir/results" // single character string of where the output files will be saved. Example out_path_ini = '.' for where the main.nf run is executed or out_path_ini = "$baseDir/results" to put the results in a result folder (created if required), $baseDir indicating where the main.nf run is executed. Example: out_path_ini = '/mnt/c/Users/Gael/Desktop'. Example : out_path_ini="/pasteur/zeus/projets/p01/BioIT/gmillot/08002_bourgeron/results". Warning: this does not work: out_path_ini = "/mnt/share/Users/gael/Desktop"
result_folder_name = "slivar_vcf_extraction" // single character string.of the name of the folder where the results files are dorpped


/*
#########################################################################
##                                                                     ##
##     End Parameters that must be set by the user                     ##
##                                                                     ##
#########################################################################
*/






//////// Pre processing

int secs = (new Date().getTime())/1000
out_path="${out_path_ini}/${result_folder_name}_${secs}"

//////// end Pre processing



//////// variables used here and also in the main.nf file

env {
    system_exec = "${system_exec}"
    out_path_ini = "${out_path_ini}"
    out_path = "${out_path}"
    queue = "${queue}"
    qos = "${qos}"
    add_options = "${add_options}"
}

//////// variables used here and also in the main.nf file





//////// Scopes

// kind of execution. Either 'local' or 'slurm'
// those are closures. See https://www.nextflow.io/docs/latest/script.html#closures
executor {
    name = "${system_exec}"
    queueSize = 2000
}

// create a report folder and print a html report file . If no absolute path, will be where the run is executed
// see https://www.nextflow.io/docs/latest/config.html#config-report
report {
       enabled = true
       file = "${out_path}/reports/report.html" // warning: here double quotes to get the nextflow variable interpretation
}

// txt file with all the processes and info
trace {
    enabled = true
    file = "${out_path}/reports/trace.txt"
}

// html file with all the processes
timeline {
    enabled = true
    file = "${out_path}/reports/timeline.html"
}

// .dot picture of the workflow
dag {
    enabled = true
    file = "${out_path}/reports/nf_dag.png"
}


// define apptainer parameters
apptainer {
    enabled = true
    autoMounts = true // automatically mounts host paths in the executed container
    if(system_exec == 'slurm' || system_exec == 'slurm_local'){
        runOptions = '--no-home --bind /pasteur' //-B /run/shm:/run/shm has been removed because block the pipeline. Warning: clone_assignment process use python. Thus, -B /run/shm:/run/shm should be required normally
    }else{
        runOptions = '--no-home -B /run/shm:/run/shm' // --no-home prevent apptainer to mount the $HOME path and thus forces apptainer to work with only what is inside the container
    }
    //runOptions = '--home $HOME:/home/$USER --bind /pasteur' // provide any extra command line options supported by the apptainer exec. Here, fait un bind de tout /pasteur dans /pasteur du container. Sinon pas d accès
    if(apptainer_path == "NULL"){
        if(system_exec == 'slurm'){
            cacheDir = '/pasteur/zeus/projets/p01/BioIT/gmillot/apptainer' // name of the directory where remote apptainer images are stored. When rerun, the exec directly uses these without redownloading them. When using a computing cluster it must be a shared folder accessible to all computing nodes
        }else if(system_exec == 'slurm_local'){
            cacheDir = 'apptainer' // "$baseDir/apptainer" can be used but do not forget double quotes.
        }else{
            cacheDir = '/mnt/c/Users/gmillot/apptainer' // "$baseDir/apptainer" can be used but do not forget double quotes.
        }
    }else{
        cacheDir = "${apptainer_path}"
    }
}

//////// end Scopes



//////// directives

// provide the default directives for all the processes in the main.nf pipeline calling this config file
process {
// directives for all the processes
    // executor='local' // no need because already defined above in the executor scope
    if(system_exec == 'slurm'){
        queue = "$queue"
        clusterOptions = "$qos $add_options"
        scratch=false
        maxRetries=3
        errorStrategy{ task.exitStatus in 137..143 ? 'retry' : 'terminate' }
    }else{
        maxRetries=0
        errorStrategy='terminate'
    }

    withLabel: bash {
        container='gmillot/bash-extended_v4.0:gitlab_v8.0'
        cpus=1
        memory='3G'
    }

    withLabel: slivar {
        container='gmillot/slivar_v2.0:gitlab_v9.1'
        cpus=1
        memory='60G'
    }
}

//////// end directives